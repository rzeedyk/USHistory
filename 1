<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>U.S. History Adventure</title>
    <style>
        /* Paste all the CSS here */
        body {
            font-family: 'Courier New', monospace;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }
        #game-container {
            display: flex;
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        /* ... (rest of the CSS) ... */
    </style>
</head>
<body>
    <div id="game-container">
        <div id="left-panel">
            <div id="character-stats"></div>
            <div id="equipment"></div>
            <div id="inventory"></div>
            <div id="save-load">
                <button id="save-game">Save Game</button>
                <button id="load-game">Load Game</button>
                <button id="new-game">New Game</button>
            </div>
        </div>
        <div id="right-panel">
            <h1>U.S. History Adventure</h1>
            <div id="ascii-map"></div>
            <div id="game-text"></div>
            <div id="action-buttons"></div>
            <div id="combat-buttons" style="display: none;"></div>
        </div>
    </div>
    <script>
        // game.js

let player = null;
let currentLocation = null;
let currentEnemy = null;
let adventurePoints = 80;
let lastRefresh = new Date();

const characterClasses = {
    historian: {
        name: "Historian",
        hp: 40,
        maxHp: 40,
        attack: 5,
        specialAbility: "Research",
        description: "Masters of knowledge, historians excel at using historical facts in combat."
    },
    revolutionist: {
        name: "Revolutionist",
        hp: 50,
        maxHp: 50,
        attack: 8,
        specialAbility: "Rally",
        description: "Brave fighters inspired by revolutionary ideals, they excel in combat."
    },
    diplomat: {
        name: "Diplomat",
        hp: 45,
        maxHp: 45,
        attack: 6,
        specialAbility: "Negotiate",
        description: "Skilled negotiators who can talk their way out of trouble or into advantages."
    }
};

const locations = {
    colonialEra: {
        name: "Colonial Tavern",
        description: "A dimly lit tavern filled with revolutionaries. Posters about the Stamp Act cover the walls.",
        actions: ["Study History", "Look for Trouble", "Rest"],
        fact: "The Stamp Act of 1765 was a direct tax imposed by the British Parliament on the colonies."
    },
    bostonHarbor: {
        name: "Boston Harbor",
        description: "A bustling port with ships laden with tea. The air is tense with talk of boycotts.",
        actions: ["Study History", "Look for Trouble", "Dump Tea"],
        fact: "The Boston Tea Party occurred on December 16, 1773, as a protest against British taxation."
    },
    independenceHall: {
        name: "Independence Hall",
        description: "The birthplace of American democracy. The Declaration of Independence was debated and signed here.",
        actions: ["Study History", "Look for Trouble", "Sign Declaration"],
        fact: "The Declaration of Independence was adopted on July 4, 1776, at Independence Hall in Philadelphia."
    }
};

function initGame() {
    document.getElementById('new-game').addEventListener('click', showCharacterCreation);
    document.getElementById('save-game').addEventListener('click', saveGame);
    document.getElementById('load-game').addEventListener('click', loadGame);
    showCharacterCreation();
}

function showCharacterCreation() {
    const rightPanel = document.getElementById('right-panel');
    rightPanel.innerHTML = `
        <h2>Choose Your Character</h2>
        ${Object.entries(characterClasses).map(([key, char]) => `
            <button onclick="selectCharacter('${key}')">${char.name}</button>
        `).join('')}
    `;
}

function selectCharacter(characterKey) {
    const selectedClass = characterClasses[characterKey];
    const rightPanel = document.getElementById('right-panel');
    rightPanel.innerHTML = `
        <h2>${selectedClass.name}</h2>
        <p>${selectedClass.description}</p>
        <p>HP: ${selectedClass.hp}, Attack: ${selectedClass.attack}</p>
        <p>Special Ability: ${selectedClass.specialAbility}</p>
        <input type="text" id="character-name" placeholder="Enter your character's name">
        <button onclick="startGame('${characterKey}')">Start Adventure</button>
    `;
}

function startGame(characterKey) {
    const nameInput = document.getElementById('character-name');
    const name = nameInput.value.trim() || `Anonymous ${characterClasses[characterKey].name}`;
    
    player = {
        ...characterClasses[characterKey],
        name: name,
        level: 1,
        experience: 0,
        historicalKnowledge: 0,
        inventory: [],
        equipment: {
            weapon: null,
            armor: null,
            accessory: null
        }
    };

    adventurePoints = 80;
    lastRefresh = new Date();
    currentLocation = 'colonialEra';

    updateCharacterStats();
    updateInventory();
    updateEquipment();
    changeLocation(currentLocation);
}

function saveGame() {
    if (player) {
        const saveData = {
            player: player,
            adventurePoints: adventurePoints,
            lastRefresh: lastRefresh,
            currentLocation: currentLocation
        };
        localStorage.setItem(`usHistoryAdventure_${player.name}`, JSON.stringify(saveData));
        addToGameText("Game saved successfully!");
    } else {
        addToGameText("No active game to save.");
    }
}

function loadGame() {
    const saves = Object.keys(localStorage).filter(key => key.startsWith('usHistoryAdventure_'));
    if (saves.length === 0) {
        addToGameText("No saved games found.");
        return;
    }

    const rightPanel = document.getElementById('right-panel');
    rightPanel.innerHTML = `
        <h2>Load Game</h2>
        ${saves.map(save => `
            <button onclick="loadSave('${save}')">${save.replace('usHistoryAdventure_', '')}</button>
        `).join('')}
    `;
}

function loadSave(saveKey) {
    const saveData = JSON.parse(localStorage.getItem(saveKey));
    player = saveData.player;
    adventurePoints = saveData.adventurePoints;
    lastRefresh = new Date(saveData.lastRefresh);
    currentLocation = saveData.currentLocation;

    updateCharacterStats();
    updateInventory();
    updateEquipment();
    changeLocation(currentLocation);
    refreshAdventurePoints();
}

function refreshAdventurePoints() {
    const now = new Date();
    const refreshTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 5, 0, 0); // 5:00 AM PST
    if (now.getHours() < 5) {
        refreshTime.setDate(refreshTime.getDate() - 1);
    }
    
    if (lastRefresh < refreshTime && now >= refreshTime) {
        adventurePoints = 80;
        lastRefresh = now;
        addToGameText("Your adventure points have been refreshed!");
    }
}

const enemies = {
    britishRedcoat: {
        name: "British Redcoat",
        hp: 30,
        attack: 5,
        fact: "British soldiers were nicknamed 'lobsterbacks' due to their bright red uniforms."
    },
    loyalist: {
        name: "Loyalist Supporter",
        hp: 25,
        attack: 4,
        fact: "Loyalists were American colonists who remained loyal to the British Crown during the Revolutionary War."
    },
    taxCollector: {
        name: "Royal Tax Collector",
        hp: 20,
        attack: 3,
        fact: "Tax collectors were often the target of colonial protests and intimidation tactics."
    }
};

function changeLocation(newLocation) {
    currentLocation = newLocation;
    const location = locations[currentLocation];
    
    updateASCIIMap();
    
    addToGameText(`You are at ${location.name}. ${location.description}`);
    updateActionButtons(location.actions);
}

function updateASCIIMap() {
    const mapDiv = document.getElementById('ascii-map');
    mapDiv.innerHTML = `
    [Colonial Tavern] --- [Boston Harbor]
            |                  |
            |                  |
            |                  |
    [Independence Hall]--------+
    `;
    
    Object.keys(locations).forEach(loc => {
        const regex = new RegExp(`\\[${locations[loc].name}\\]`);
        mapDiv.innerHTML = mapDiv.innerHTML.replace(regex, `<a href="#" onclick="changeLocation('${loc}'); return false;">[${locations[loc].name}]</a>`);
    });
}

function updateActionButtons(actions) {
    const actionDiv = document.getElementById('action-buttons');
    actionDiv.innerHTML = actions.map(action => 
        `<button onclick="performAction('${action}')">${action}</button>`
    ).join('');
}

function performAction(action) {
    if (adventurePoints <= 0) {
        addToGameText("You're out of adventure points for today. Come back tomorrow!");
        return;
    }
    
    adventurePoints--;
    updateCharacterStats();  // To reflect the change in adventure points
    
    switch(action) {
        case "Study History":
            player.historicalKnowledge += 5;
            addToGameText(`You study the local history. Your knowledge increases! You learn: ${locations[currentLocation].fact}`);
            break;
        case "Look for Trouble":
            initiateCombat();
            break;
        case "Rest":
            player.hp = Math.min(player.maxHp, player.hp + 10);
            addToGameText("You take a short rest. You recover 10 HP.");
            break;
        case "Dump Tea":
            player.experience += 10;
            addToGameText("You participate in the Boston Tea Party. Your revolutionary spirit grows stronger!");
            break;
        case "Sign Declaration":
            player.experience += 20;
            addToGameText("You sign the Declaration of Independence. You feel a sense of pride and responsibility.");
            break;
    }
    
    checkLevelUp();
    updateCharacterStats();
}

function initiateCombat() {
    const enemyKeys = Object.keys(enemies);
    currentEnemy = {...enemies[enemyKeys[Math.floor(Math.random() * enemyKeys.length)]]};
    addToGameText(`Oh no! You've encountered a ${currentEnemy.name}!`);
    addToGameText("Historical fact: " + currentEnemy.fact);
    
    document.getElementById('action-buttons').style.display = 'none';
    updateCombatButtons();
}

function updateCombatButtons() {
    const combatDiv = document.getElementById('combat-buttons');
    combatDiv.style.display = 'block';
    combatDiv.innerHTML = `
        <button onclick="combatAction('attack')">Attack</button>
        <button onclick="combatAction('defend')">Defend</button>
        <button onclick="combatAction('special')">Use ${player.specialAbility}</button>
        <button onclick="combatAction('item')">Use Item</button>
        <button onclick="combatAction('run')">Run</button>
    `;
    addToGameText(`${currentEnemy.name} - HP: ${currentEnemy.hp}`);
}

function combatAction(action) {
    let playerDamage = 0;
    let enemyDamage = Math.floor(Math.random() * currentEnemy.attack) + 1;

    switch(action) {
        case 'attack':
            playerDamage = player.attack + Math.floor(Math.random() * 3) - 1;
            addToGameText(`You attack the ${currentEnemy.name} for ${playerDamage} damage!`);
            break;
        case 'defend':
            enemyDamage = Math.max(0, enemyDamage - Math.floor(player.level / 2));
            addToGameText(`You defend, reducing incoming damage!`);
            break;
        case 'special':
            switch (player.specialAbility) {
                case "Research":
                    if (player.historicalKnowledge >= 10) {
                        playerDamage = Math.floor(player.historicalKnowledge / 5) + player.attack;
                        player.historicalKnowledge -= 10;
                        addToGameText(`You use your historical knowledge to confuse the ${currentEnemy.name}, dealing ${playerDamage} damage!`);
                    } else {
                        addToGameText("You don't have enough historical knowledge to use this ability!");
                        return;
                    }
                    break;
                case "Rally":
                    playerDamage = player.attack * 2;
                    addToGameText(`You rally your strength and attack the ${currentEnemy.name} for ${playerDamage} damage!`);
                    break;
                case "Negotiate":
                    playerDamage = player.attack;
                    enemyDamage = Math.max(0, enemyDamage - Math.floor(player.level / 2));
                    addToGameText(`You attempt to negotiate, reducing the enemy's attack and dealing ${playerDamage} damage!`);
                    break;
            }
            break;
        case 'item':
            useItem();
            return;
        case 'run':
            if (Math.random() < 0.5) {
                addToGameText("You successfully flee from the battle!");
                endCombat();
                return;
            } else {
                addToGameText("You fail to escape!");
                break;
            }
    }

    currentEnemy.hp -= playerDamage;
    player.hp -= enemyDamage;

    addToGameText(`The ${currentEnemy.name} attacks you for ${enemyDamage} damage!`);

    if (currentEnemy.hp <= 0) {
        addToGameText(`You defeated the ${currentEnemy.name}! You gain experience and historical knowledge.`);
        player.experience += 10;
        player.historicalKnowledge += 5;
        endCombat();
    } else if (player.hp <= 0) {
        addToGameText("You've been defeated! You wake up back where you started, a bit dazed but wiser.");
        player.hp = Math.max(1, Math.floor(player.maxHp / 2));
        endCombat();
    } else {
        updateCombatButtons();
    }

    updateCharacterStats();
    checkLevelUp();
}

function endCombat() {
    currentEnemy = null;
    document.getElementById('combat-buttons').style.display = 'none';
    document.getElementById('action-buttons').style.display = 'block';
}

function checkLevelUp() {
    if (player.experience >= player.level * 20) {
        player.level++;
        player.maxHp += 10;
        player.hp = player.maxHp;
        player.attack += 1;
        addToGameText(`Congratulations! You've leveled up to level ${player.level}! Your stats have increased.`);
        updateCharacterStats();
    }
}

function updateCharacterStats() {
    const statsDiv = document.getElementById('character-stats');
    statsDiv.innerHTML = `
        <h3>${player.name} the ${player.name}</h3>
        <p>Level: ${player.level}</p>
        <p>HP: ${player.hp}/${player.maxHp}</p>
        <p>Attack: ${player.attack}</p>
        <p>Historical Knowledge: ${player.historicalKnowledge}</p>
        <p>Experience: ${player.experience}</p>
        <p>Adventure Points: ${adventurePoints}</p>
    `;
}

function addToGameText(text) {
    const gameText = document.getElementById('game-text');
    gameText.innerHTML += text + "<br><br>";
    gameText.scrollTop = gameText.scrollHeight;
}
const items = {
    quillPen: {
        name: "Quill Pen of Quizzical Queries",
        description: "A feather pen that writes history... and occasionally rewrites it.",
        effect: () => {
            player.historicalKnowledge += 10;
            addToGameText("You scribble furiously with the Quill Pen. Your historical knowledge increases by 10, but your hand cramps terribly!");
        }
    },
    teaBox: {
        name: "Boston Tea Party Mix",
        description: "A box of tea that's just begging to be thrown into a harbor.",
        effect: () => {
            player.hp = Math.min(player.maxHp, player.hp + 20);
            addToGameText("You brew some revolutionary tea. It tastes like freedom... and harbor water. Your HP is restored by 20 points.");
        }
    },
    minutemanMusket: {
        name: "Minuteman's Maybe-Accurate Musket",
        description: "It's guaranteed to fire once a minute, but accuracy may vary wildly.",
        effect: () => {
            player.attack += 3;
            addToGameText("You ready the Minuteman's Musket. Your attack increases by 3, and you feel ready at a minute's notice!");
        }
    }
};

const equipment = {
    weapons: {
        woodenSword: { name: "Wooden Sword", attack: 2 },
        revolutionarySaber: { name: "Revolutionary Saber", attack: 5 }
    },
    armors: {
        leatherJerkin: { name: "Leather Jerkin", defense: 2 },
        colonialCoat: { name: "Colonial Coat", defense: 5 }
    },
    accessories: {
        luckyPenny: { name: "Lucky Penny", effect: "Increases chance of finding items" },
        freedomBadge: { name: "Freedom Badge", effect: "Increases experience gain" }
    }
};

function updateInventory() {
    const inventoryDiv = document.getElementById('inventory');
    inventoryDiv.innerHTML = "<h3>Inventory:</h3>";
    if (player.inventory.length === 0) {
        inventoryDiv.innerHTML += "<p>Your inventory is empty.</p>";
    } else {
        const ul = document.createElement("ul");
        player.inventory.forEach(item => {
            const li = document.createElement("li");
            li.textContent = item.name;
            const useButton = document.createElement("button");
            useButton.textContent = "Use";
            useButton.onclick = () => useItem(item);
            li.appendChild(useButton);
            ul.appendChild(li);
        });
        inventoryDiv.appendChild(ul);
    }
}

function updateEquipment() {
    const equipmentDiv = document.getElementById('equipment');
    equipmentDiv.innerHTML = `
        <h3>Equipment:</h3>
        <p>Weapon: ${player.equipment.weapon ? player.equipment.weapon.name : 'None'}</p>
        <p>Armor: ${player.equipment.armor ? player.equipment.armor.name : 'None'}</p>
        <p>Accessory: ${player.equipment.accessory ? player.equipment.accessory.name : 'None'}</p>
    `;
}

function useItem(item) {
    item.effect();
    player.inventory = player.inventory.filter(i => i !== item);
    updateInventory();
    updateCharacterStats();
}

function addItemToInventory(itemName) {
    if (items[itemName]) {
        player.inventory.push(items[itemName]);
        addToGameText(`You found a ${items[itemName].name}!`);
        updateInventory();
    }
}

function equipItem(slot, item) {
    if (player.equipment[slot]) {
        player.inventory.push(player.equipment[slot]);
    }
    player.equipment[slot] = item;
    player.inventory = player.inventory.filter(i => i !== item);
    updateEquipment();
    updateInventory();
    updateCharacterStats();
}

function findRandomItem() {
    const itemKeys = Object.keys(items);
    const randomItem = itemKeys[Math.floor(Math.random() * itemKeys.length)];
    addItemToInventory(randomItem);
}

function findRandomEquipment() {
    const equipmentTypes = ['weapons', 'armors', 'accessories'];
    const randomType = equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)];
    const equipmentKeys = Object.keys(equipment[randomType]);
    const randomEquipment = equipment[randomType][equipmentKeys[Math.floor(Math.random() * equipmentKeys.length)]];
    
    addToGameText(`You found ${randomEquipment.name}!`);
    const equipButton = document.createElement('button');
    equipButton.textContent = `Equip ${randomEquipment.name}`;
    equipButton.onclick = () => equipItem(randomType.slice(0, -1), randomEquipment);
    document.getElementById('game-text').appendChild(equipButton);
}

// Modify performAction function to include chance of finding items
function performAction(action) {
    // ... (previous code remains the same)

    // Add chance to find items or equipment
    if (Math.random() < 0.2) {  // 20% chance
        if (Math.random() < 0.5) {
            findRandomItem();
        } else {
            findRandomEquipment();
        }
    }

    // ... (rest of the function remains the same)
}

// Modify combatAction function to include item usage
function combatAction(action) {
    // ... (previous code remains the same)

    if (action === 'item') {
        if (player.inventory.length === 0) {
            addToGameText("You don't have any items to use!");
            return;
        }
        const itemButtons = player.inventory.map(item => {
            return `<button onclick="useItemInCombat('${item.name}')">${item.name}</button>`;
        }).join('');
        document.getElementById('combat-buttons').innerHTML = itemButtons + '<button onclick="updateCombatButtons()">Back</button>';
        return;
    }

    // ... (rest of the function remains the same)
}

function useItemInCombat(itemName) {
    const item = player.inventory.find(i => i.name === itemName);
    if (item) {
        useItem(item);
        updateCombatButtons();
    }
}

// Initialize the game
document.addEventListener('DOMContentLoaded', (event) => {
    initGame();
});
    </script>
</body>
</html>
